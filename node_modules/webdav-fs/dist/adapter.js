"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAdapter = void 0;
var webdav_1 = require("webdav");
var NOOP = function () { };
var TYPE_KEY = "@@fsType";
function __convertStat(data) {
    return {
        isDirectory: function () {
            return data.type === "directory";
        },
        isFile: function () {
            return data.type === "file";
        },
        mtime: new Date(data.lastmod).getTime(),
        name: data.basename,
        size: data.size || 0
    };
}
function __executeCallbackAsync(callback) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof setImmediate !== "undefined") {
        setImmediate(function () {
            callback.apply.apply(callback, __spreadArray([null], args, false));
        });
    }
    else {
        setTimeout(function () {
            callback.apply.apply(callback, __spreadArray([null], args, false));
        }, 0);
    }
}
function createAdapter(webDAVEndpoint, options) {
    var _a;
    if (options === void 0) { options = {}; }
    var client = (0, webdav_1.createClient)(webDAVEndpoint, options);
    return _a = {},
        _a[TYPE_KEY] = "webdav-fs",
        _a.createReadStream = function (filePath, options) {
            var clientOptions = {};
            if (options) {
                if (typeof options.headers === "object") {
                    clientOptions.headers = options.headers;
                }
                if (typeof options.start === "number") {
                    clientOptions.range = { start: options.start, end: options.end };
                }
            }
            return client.createReadStream(filePath, clientOptions);
        },
        _a.createWriteStream = function (filePath, options) {
            var clientOptions = {};
            if (options) {
                if (typeof options.headers === "object") {
                    clientOptions.headers = options.headers;
                }
            }
            return client.createWriteStream(filePath, clientOptions);
        },
        _a.mkdir = function (dirPath, callback) {
            client
                .createDirectory(dirPath)
                .then(function () {
                __executeCallbackAsync(callback, [null]);
            })
                .catch(callback);
        },
        _a.readdir = function (dirPath, modeOrCallback, callback) {
            var mode = typeof modeOrCallback === "string" ? modeOrCallback : "node";
            var callbackReal = NOOP;
            if (typeof modeOrCallback === "function") {
                callbackReal = modeOrCallback;
            }
            else if (callback !== undefined && typeof callback == "function") {
                callbackReal = callback;
            }
            client
                .getDirectoryContents(dirPath)
                .then(function (contents) {
                var results;
                if (mode === "node") {
                    results = contents.map(function (statItem) {
                        return statItem.basename;
                    });
                }
                else if (mode === "stat") {
                    results = contents.map(__convertStat);
                }
                else {
                    throw new Error("Unknown mode: " + mode);
                }
                __executeCallbackAsync(callbackReal, [null, results]);
            })
                .catch(callbackReal);
        },
        _a.readFile = function (filename, encodingOrCallback, callback) {
            var encoding = typeof encodingOrCallback === "string" ? encodingOrCallback : "text";
            var callbackReal = NOOP;
            if (typeof encodingOrCallback === "function") {
                callbackReal = encodingOrCallback;
            }
            else if (callback !== undefined && typeof callback === "function") {
                callbackReal = callback;
            }
            encoding = encoding === "utf8" ? "text" : encoding;
            client
                .getFileContents(filename, { format: encoding })
                .then(function (data) {
                __executeCallbackAsync(callbackReal, [null, data]);
            })
                .catch(callbackReal);
        },
        _a.rename = function (filePath, targetPath, callback) {
            client
                .moveFile(filePath, targetPath)
                .then(function () {
                __executeCallbackAsync(callback, [null]);
            })
                .catch(callback);
        },
        _a.rmdir = function (targetPath, callback) {
            client
                .deleteFile(targetPath)
                .then(function () {
                __executeCallbackAsync(callback, [null]);
            })
                .catch(callback);
        },
        _a.stat = function (remotePath, callback) {
            client
                .stat(remotePath)
                .then(function (stat) {
                __executeCallbackAsync(callback, [null, __convertStat(stat)]);
            })
                .catch(callback);
        },
        _a.unlink = function (targetPath, callback) {
            client
                .deleteFile(targetPath)
                .then(function () {
                __executeCallbackAsync(callback, [null]);
            })
                .catch(callback);
        },
        _a.writeFile = function (filename, data, encodingOrCallback, callback) {
            var encoding = typeof encodingOrCallback === "string" ? encodingOrCallback : "text";
            var callbackReal = NOOP;
            if (typeof encodingOrCallback === "function") {
                callbackReal = encodingOrCallback;
            }
            else if (callback !== undefined && typeof callback === "function") {
                callbackReal = callback;
            }
            encoding = encoding === "utf8" ? "text" : encoding;
            client
                .putFileContents(filename, data /*{ format: encoding }*/)
                .then(function () {
                __executeCallbackAsync(callbackReal, [null]);
            })
                .catch(callbackReal);
        },
        _a;
}
exports.createAdapter = createAdapter;
//# sourceMappingURL=data:application/json;base64,