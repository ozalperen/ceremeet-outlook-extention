"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.permissionsToRequiredResourceAccess = exports.generateAadManifestTemplate = void 0;
const tslib_1 = require("tslib");
const folder_1 = require("../folder");
const constants_1 = require("../plugins/resource/aad/constants");
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
async function generateAadManifestTemplate(projectFolder, projectSettings, requiredResourceAccess = undefined, updateCapabilities = false) {
    const templatesFolder = folder_1.getTemplatesFolder();
    const appDir = `${projectFolder}/${constants_1.Constants.appPackageFolder}`;
    const aadManifestTemplate = `${templatesFolder}/${constants_1.Constants.aadManifestTemplateFolder}/${constants_1.Constants.aadManifestTemplateName}`;
    await fs.ensureDir(appDir);
    const azureSolutionSettings = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.solutionSettings;
    const aadManifestPath = `${appDir}/${constants_1.Constants.aadManifestTemplateName}`;
    let aadJson;
    if (await fs.pathExists(aadManifestPath)) {
        aadJson = await fs.readJSON(aadManifestPath);
    }
    else {
        aadJson = await fs.readJSON(aadManifestTemplate);
    }
    if (!aadJson.replyUrlsWithType) {
        aadJson.replyUrlsWithType = [];
    }
    if (requiredResourceAccess) {
        aadJson.requiredResourceAccess = requiredResourceAccess;
    }
    if (azureSolutionSettings.capabilities.includes("Tab")) {
        const tabRedirectUrl1 = "{{state.fx-resource-aad-app-for-teams.frontendEndpoint}}/auth-end.html";
        if (!isRedirectUrlExist(aadJson.replyUrlsWithType, tabRedirectUrl1, "Web")) {
            aadJson.replyUrlsWithType.push({
                url: tabRedirectUrl1,
                type: "Web",
            });
        }
        const tabRedirectUrl2 = "{{state.fx-resource-aad-app-for-teams.frontendEndpoint}}/auth-end.html?clientId={{state.fx-resource-aad-app-for-teams.clientId}}";
        if (!isRedirectUrlExist(aadJson.replyUrlsWithType, tabRedirectUrl2, "Spa")) {
            aadJson.replyUrlsWithType.push({
                url: tabRedirectUrl2,
                type: "Spa",
            });
        }
        const tabRedirectUrl3 = "{{state.fx-resource-aad-app-for-teams.frontendEndpoint}}/blank-auth-end.html";
        if (!isRedirectUrlExist(aadJson.replyUrlsWithType, tabRedirectUrl3, "Spa")) {
            aadJson.replyUrlsWithType.push({
                url: tabRedirectUrl3,
                type: "Spa",
            });
        }
    }
    if (azureSolutionSettings.capabilities.includes("Bot")) {
        const botRedirectUrl = "{{state.fx-resource-aad-app-for-teams.botEndpoint}}/auth-end.html";
        if (!isRedirectUrlExist(aadJson.replyUrlsWithType, botRedirectUrl, "Web")) {
            aadJson.replyUrlsWithType.push({
                url: botRedirectUrl,
                type: "Web",
            });
        }
    }
    if (updateCapabilities) {
        if (projectSettings.solutionSettings.capabilities.includes("Tab") &&
            !projectSettings.solutionSettings.capabilities.includes("TabSSO")) {
            projectSettings.solutionSettings.capabilities.push("TabSSO");
        }
        if (projectSettings.solutionSettings.capabilities.includes("Bot") &&
            !projectSettings.solutionSettings.capabilities.includes("BotSSO")) {
            projectSettings.solutionSettings.capabilities.push("BotSSO");
        }
    }
    await fs.writeJSON(`${appDir}/${constants_1.Constants.aadManifestTemplateName}`, aadJson, {
        spaces: 4,
        EOL: os.EOL,
    });
}
exports.generateAadManifestTemplate = generateAadManifestTemplate;
function permissionsToRequiredResourceAccess(permissions) {
    const result = [];
    permissions.forEach((permission) => {
        const res = {
            resourceAppId: permission.resource,
            resourceAccess: permission.application
                .map((item) => {
                return { id: item, type: "Role" };
            })
                .concat(permission.delegated.map((item) => {
                return { id: item, type: "Scope" };
            })),
        };
        result.push(res);
    });
    return result;
}
exports.permissionsToRequiredResourceAccess = permissionsToRequiredResourceAccess;
function isRedirectUrlExist(replyUrls, url, type) {
    return (replyUrls.filter((item) => item.url === url && item.type === type).length > 0);
}
//# sourceMappingURL=generateAadManifestTemplate.js.map