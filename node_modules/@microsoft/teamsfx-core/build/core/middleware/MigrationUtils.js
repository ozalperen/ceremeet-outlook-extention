"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.needMigrateToAadManifest = exports.permissionsToRequiredResourceAccess = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const tools_1 = require("../../common/tools");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const plugins_1 = require("../../plugins");
function permissionsToRequiredResourceAccess(permissions) {
    const result = [];
    permissions.forEach((permission) => {
        const res = {
            resourceAppId: permission.resource,
            resourceAccess: permission.application
                .map((item) => {
                return { id: item, type: "Role" };
            })
                .concat(permission.delegated.map((item) => {
                return { id: item, type: "Scope" };
            })),
        };
        result.push(res);
    });
    return result;
}
exports.permissionsToRequiredResourceAccess = permissionsToRequiredResourceAccess;
async function needMigrateToAadManifest(ctx) {
    var _a, _b;
    try {
        if (!tools_1.isConfigUnifyEnabled() || !tools_1.isAadManifestEnabled()) {
            return false;
        }
        const inputs = ctx.arguments[ctx.arguments.length - 1];
        if (!inputs.projectPath) {
            return false;
        }
        const fxExist = await fs_extra_1.default.pathExists(path_1.default.join(inputs.projectPath, ".fx"));
        if (!fxExist) {
            return false;
        }
        const aadManifestTemplateExist = await fs_extra_1.default.pathExists(path_1.default.join(inputs.projectPath, "templates", "appPackage", "aad.template.json"));
        if (aadManifestTemplateExist) {
            return false;
        }
        const permissionFileExist = await fs_extra_1.default.pathExists(path_1.default.join(inputs.projectPath, "permissions.json"));
        if (!permissionFileExist) {
            return false;
        }
        const projectSettingsJson = await fs_extra_1.default.readJson(path_1.default.join(inputs.projectPath, ".fx", "configs", "projectSettings.json"));
        const aadPluginIsActive = (_b = (_a = projectSettingsJson.solutionSettings) === null || _a === void 0 ? void 0 : _a.activeResourcePlugins) === null || _b === void 0 ? void 0 : _b.includes(plugins_1.PluginNames.AAD);
        if (!aadPluginIsActive) {
            return false;
        }
        return true;
    }
    catch (err) {
        return false;
    }
}
exports.needMigrateToAadManifest = needMigrateToAadManifest;
//# sourceMappingURL=MigrationUtils.js.map