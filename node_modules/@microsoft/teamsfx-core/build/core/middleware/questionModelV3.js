"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuestionModelMW_V3 = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../common/localizeUtils");
const question_1 = require("../../plugins/resource/bot/question");
const question_2 = require("../../plugins/solution/fx-solution/question");
const globalVars_1 = require("../globalVars");
const question_3 = require("../question");
/**
 * This middleware will help to collect input from question flow
 */
const QuestionModelMW_V3 = async (ctx, next) => {
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    const method = ctx.method;
    let getQuestionRes = teamsfx_api_1.ok(undefined);
    if (method === "createProjectV3") {
        getQuestionRes = await createProjectQuestionV3(inputs);
    }
    else if (method === "executeUserTaskV3") {
        const func = ctx.arguments[0];
        if (func.method === "addFeature") {
            getQuestionRes = await getQuestionsForAddFeature(inputs);
        }
    }
    if (getQuestionRes.isErr()) {
        globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.error(`[core] failed to get questions for ${method}: ${getQuestionRes.error.message}`);
        ctx.result = teamsfx_api_1.err(getQuestionRes.error);
        return;
    }
    globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.debug(`[core] success to get questions for ${method}`);
    const node = getQuestionRes.value;
    if (node) {
        const res = await teamsfx_api_1.traverse(node, inputs, globalVars_1.TOOLS.ui, globalVars_1.TOOLS.telemetryReporter);
        if (res.isErr()) {
            globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.debug(`[core] failed to run question model for ${method}`);
            ctx.result = teamsfx_api_1.err(res.error);
            return;
        }
        globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.info(`[core] success to run question model for ${method}, answers:${JSON.stringify(inputs)}`);
    }
    await next();
};
exports.QuestionModelMW_V3 = QuestionModelMW_V3;
async function createProjectQuestionV3(inputs) {
    const node = new teamsfx_api_1.QTreeNode(question_3.getCreateNewOrFromSampleQuestion(inputs.platform));
    // create new
    const root = new teamsfx_api_1.QTreeNode({ type: "group" });
    node.addChild(root);
    root.condition = { equals: question_3.ScratchOptionYes.id };
    // capabilities
    const capQuestion = question_3.createCapabilityQuestionPreview();
    const capNode = new teamsfx_api_1.QTreeNode(capQuestion);
    root.addChild(capNode);
    const triggerQuestion = question_1.createHostTypeTriggerQuestion(inputs.platform);
    const triggerNode = new teamsfx_api_1.QTreeNode(triggerQuestion);
    triggerNode.condition = { equals: question_2.NotificationOptionItem.id };
    capNode.addChild(triggerNode);
    // Language
    const programmingLanguage = new teamsfx_api_1.QTreeNode(question_3.ProgrammingLanguageQuestion);
    capNode.addChild(programmingLanguage);
    root.addChild(new teamsfx_api_1.QTreeNode(question_3.QuestionRootFolder));
    root.addChild(new teamsfx_api_1.QTreeNode(question_3.createAppNameQuestion()));
    // create from sample
    const sampleNode = new teamsfx_api_1.QTreeNode(question_3.SampleSelect);
    node.addChild(sampleNode);
    sampleNode.condition = { equals: question_3.ScratchOptionNo.id };
    sampleNode.addChild(new teamsfx_api_1.QTreeNode(question_3.QuestionRootFolder));
    return teamsfx_api_1.ok(node.trim());
}
// for demo only
async function getQuestionsForAddFeature(inputs) {
    const question = {
        name: "feature",
        title: localizeUtils_1.getLocalizedString("core.addFeatureQuestion.title"),
        type: "singleSelect",
        staticOptions: [question_2.AzureResourceSQLNewUI, question_2.BotOptionItem],
    };
    return teamsfx_api_1.ok(new teamsfx_api_1.QTreeNode(question));
}
//# sourceMappingURL=questionModelV3.js.map