// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._scaffoldLocalDebugSettings = exports.scaffoldLocalDebugSettings = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localSettingsProvider_1 = require("../../../../common/localSettingsProvider");
const projectSettingsHelper_1 = require("../../../../common/local/projectSettingsHelper");
const Launch = tslib_1.__importStar(require("./util/launch"));
const LaunchNext = tslib_1.__importStar(require("./util/launchNext"));
const Tasks = tslib_1.__importStar(require("./util/tasks"));
const TasksNext = tslib_1.__importStar(require("./util/tasksNext"));
const Settings = tslib_1.__importStar(require("./util/settings"));
const telemetry_1 = require("./util/telemetry");
const error_1 = require("./error");
const tools_1 = require("../../../../common/tools");
const common_1 = require("../../../../common");
async function scaffoldLocalDebugSettings(ctx, inputs, localSettings, generateLocalSettingsFile = true) {
    return await _scaffoldLocalDebugSettings(ctx.projectSetting, inputs, ctx.telemetryReporter, ctx.logProvider, ctx.cryptoProvider, localSettings, generateLocalSettingsFile);
}
exports.scaffoldLocalDebugSettings = scaffoldLocalDebugSettings;
async function _scaffoldLocalDebugSettings(projectSetting, inputs, telemetryReporter, logProvider, cryptoProvider, localSettings, generateLocalSettingsFile = true) {
    var _a;
    const isSpfx = projectSettingsHelper_1.ProjectSettingsHelper.isSpfx(projectSetting);
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(projectSetting);
    const includeFuncHostedBot = projectSettingsHelper_1.ProjectSettingsHelper.includeFuncHostedBot(projectSetting);
    const botCapabilities = projectSettingsHelper_1.ProjectSettingsHelper.getBotCapabilities(projectSetting);
    const programmingLanguage = (_a = projectSetting.programmingLanguage) !== null && _a !== void 0 ? _a : "";
    const isM365 = projectSetting.isM365;
    const telemetryProperties = {
        platform: inputs.platform,
        spfx: isSpfx ? "true" : "false",
        frontend: includeFrontend ? "true" : "false",
        function: includeBackend ? "true" : "false",
        bot: includeBot ? "true" : "false",
        auth: includeAAD && includeSimpleAuth ? "true" : "false",
        "bot-host-type": includeFuncHostedBot ? common_1.BotHostTypes.AzureFunctions : common_1.BotHostTypes.AppService,
        "bot-capabilities": JSON.stringify(botCapabilities),
        "programming-language": programmingLanguage,
    };
    telemetry_1.TelemetryUtils.init(telemetryReporter);
    telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.scaffoldLocalDebugSettings, telemetryProperties);
    try {
        // scaffold for both vscode and cli
        if (inputs.platform === teamsfx_api_1.Platform.VSCode || inputs.platform === teamsfx_api_1.Platform.CLI) {
            if (isSpfx) {
                // Only generate launch.json and tasks.json for SPFX
                const launchConfigurations = Launch.generateSpfxConfigurations();
                const launchCompounds = Launch.generateSpfxCompounds();
                const tasks = Tasks.generateSpfxTasks();
                const tasksInputs = Tasks.generateInputs();
                //TODO: save files via context api
                await fs.ensureDir(`${inputs.projectPath}/.vscode/`);
                await updateJson(`${inputs.projectPath}/.vscode/launch.json`, {
                    version: "0.2.0",
                    configurations: launchConfigurations,
                    compounds: launchCompounds,
                }, LaunchNext.mergeLaunches);
                await updateJson(`${inputs.projectPath}/.vscode/tasks.json`, {
                    version: "2.0.0",
                    tasks: tasks,
                    inputs: tasksInputs,
                }, TasksNext.mergeTasks);
            }
            else {
                const launchConfigurations = isM365
                    ? LaunchNext.generateM365Configurations(includeFrontend, includeBackend, includeBot)
                    : (await useNewTasks(inputs.projectPath))
                        ? LaunchNext.generateConfigurations(includeFrontend, includeBackend, includeBot)
                        : Launch.generateConfigurations(includeFrontend, includeBackend, includeBot);
                const launchCompounds = isM365
                    ? LaunchNext.generateM365Compounds(includeFrontend, includeBackend, includeBot)
                    : (await useNewTasks(inputs.projectPath))
                        ? LaunchNext.generateCompounds(includeFrontend, includeBackend, includeBot)
                        : Launch.generateCompounds(includeFrontend, includeBackend, includeBot);
                const tasks = isM365
                    ? TasksNext.generateM365Tasks(includeFrontend, includeBackend, includeBot, programmingLanguage)
                    : (await useNewTasks(inputs.projectPath))
                        ? TasksNext.generateTasks(includeFrontend, includeBackend, includeBot, includeFuncHostedBot, programmingLanguage)
                        : Tasks.generateTasks(includeFrontend, includeBackend, includeBot, includeSimpleAuth, programmingLanguage);
                //TODO: save files via context api
                await fs.ensureDir(`${inputs.projectPath}/.vscode/`);
                await updateJson(`${inputs.projectPath}/.vscode/launch.json`, {
                    version: "0.2.0",
                    configurations: launchConfigurations,
                    compounds: launchCompounds,
                }, LaunchNext.mergeLaunches);
                await updateJson(`${inputs.projectPath}/.vscode/tasks.json`, {
                    version: "2.0.0",
                    tasks: tasks,
                }, TasksNext.mergeTasks);
                // generate localSettings.json
                if (!tools_1.isConfigUnifyEnabled()) {
                    localSettings = generateLocalSettingsFile
                        ? await scaffoldLocalSettingsJson(projectSetting, inputs, cryptoProvider, localSettings)
                        : undefined;
                }
            }
            await updateJson(`${inputs.projectPath}/.vscode/settings.json`, Settings.generateSettings(includeBackend || includeFuncHostedBot, isSpfx), Settings.mergeSettings);
        }
    }
    catch (error) {
        const systemError = error_1.ScaffoldLocalDebugSettingsError(error);
        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.scaffoldLocalDebugSettings, systemError);
        return teamsfx_api_1.err(systemError);
    }
    telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.scaffoldLocalDebugSettings, telemetryProperties);
    return teamsfx_api_1.ok(localSettings);
}
exports._scaffoldLocalDebugSettings = _scaffoldLocalDebugSettings;
async function scaffoldLocalSettingsJson(projectSetting, inputs, cryptoProvider, localSettings) {
    const localSettingsProvider = new localSettingsProvider_1.LocalSettingsProvider(inputs.projectPath);
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(projectSetting);
    if (localSettings !== undefined) {
        // Add local settings for the new added capability/resource
        localSettings = localSettingsProvider.incrementalInitV2(localSettings, includeBackend, includeBot, includeFrontend, includeAAD, includeSimpleAuth);
        await localSettingsProvider.saveJson(localSettings, cryptoProvider);
    }
    else {
        // Initialize a local settings on scaffolding
        localSettings = localSettingsProvider.initV2(includeFrontend, includeBackend, includeBot, includeSimpleAuth, includeAAD);
        await localSettingsProvider.saveJson(localSettings, cryptoProvider);
    }
    return localSettings;
}
async function useNewTasks(projectPath) {
    // for new project or project with "validate-local-prerequisites", use new tasks content
    const tasksJsonPath = `${projectPath}/.vscode/tasks.json`;
    if (await fs.pathExists(tasksJsonPath)) {
        try {
            const tasksContent = await fs.readFile(tasksJsonPath, "utf-8");
            return tasksContent.includes("fx-extension.validate-local-prerequisites");
        }
        catch (error) {
            return false;
        }
    }
    return true;
}
async function updateJson(path, newData, mergeFunc) {
    let finalData;
    if (await fs.pathExists(path)) {
        try {
            const existingData = await fs.readJSON(path);
            finalData = mergeFunc(existingData, newData);
        }
        catch (error) {
            // If failed to parse or edit the existing file, just overwrite completely
            finalData = newData;
        }
    }
    else {
        finalData = newData;
    }
    await fs.writeJSON(path, finalData, {
        spaces: 4,
        EOL: os.EOL,
    });
}
//# sourceMappingURL=scaffolding.js.map