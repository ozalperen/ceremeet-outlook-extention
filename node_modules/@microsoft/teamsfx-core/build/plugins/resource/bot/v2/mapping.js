"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectFileName = exports.getTriggerScenarios = exports.getLanguage = exports.getServiceType = exports.getRuntime = void 0;
const interfaces_1 = require("../../../../common/azure-hosting/interfaces");
const constants_1 = require("../constants");
const question_1 = require("../question");
const strings_1 = require("../resources/strings");
const enum_1 = require("./enum");
const runtimeMap = new Map([
    [enum_1.ProgrammingLanguage.Js, enum_1.Runtime.Node],
    [enum_1.ProgrammingLanguage.Ts, enum_1.Runtime.Node],
    [enum_1.ProgrammingLanguage.Csharp, enum_1.Runtime.Dotnet],
]);
const defaultRuntime = enum_1.Runtime.Node;
const serviceMap = new Map([
    [strings_1.HostTypes.APP_SERVICE, interfaces_1.ServiceType.AppService],
    [strings_1.HostTypes.AZURE_FUNCTIONS, interfaces_1.ServiceType.Functions],
]);
const defaultServiceType = interfaces_1.ServiceType.AppService;
const langMap = new Map([
    ["javascript", enum_1.ProgrammingLanguage.Js],
    ["typescript", enum_1.ProgrammingLanguage.Ts],
    ["csharp", enum_1.ProgrammingLanguage.Csharp],
]);
const defaultLang = enum_1.ProgrammingLanguage.Js;
const triggerScenariosMap = new Map([
    [
        question_1.FunctionsHttpTriggerOptionItem.id,
        [
            constants_1.TemplateProjectsScenarios.NOTIFICATION_FUNCTION_BASE_SCENARIO_NAME,
            constants_1.TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME,
        ],
    ],
    [
        question_1.FunctionsTimerTriggerOptionItem.id,
        [
            constants_1.TemplateProjectsScenarios.NOTIFICATION_FUNCTION_BASE_SCENARIO_NAME,
            constants_1.TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME,
        ],
    ],
    [question_1.AppServiceOptionItem.id, [constants_1.TemplateProjectsScenarios.NOTIFICATION_RESTIFY_SCENARIO_NAME]],
    [question_1.AppServiceOptionItemForVS.id, [constants_1.TemplateProjectsScenarios.NOTIFICATION_WEBAPI_SCENARIO_NAME]],
]);
const projectFileMap = new Map([
    [enum_1.Runtime.Node, (_) => "package.json"],
    [enum_1.Runtime.Dotnet, (appName) => `${appName}.csproj`],
]);
function getRuntime(lang) {
    const runtime = runtimeMap.get(lang);
    if (runtime) {
        return runtime;
    }
    return defaultRuntime;
}
exports.getRuntime = getRuntime;
function getServiceType(hostType) {
    const serviceType = serviceMap.get(hostType !== null && hostType !== void 0 ? hostType : "");
    if (serviceType) {
        return serviceType;
    }
    return defaultServiceType;
}
exports.getServiceType = getServiceType;
function getLanguage(lang) {
    var _a;
    const language = langMap.get((_a = lang === null || lang === void 0 ? void 0 : lang.toLowerCase()) !== null && _a !== void 0 ? _a : "");
    if (language) {
        return language;
    }
    return defaultLang;
}
exports.getLanguage = getLanguage;
function getTriggerScenarios(trigger) {
    const scenarios = triggerScenariosMap.get(trigger);
    if (scenarios) {
        return scenarios;
    }
    throw new Error("invalid bot input");
}
exports.getTriggerScenarios = getTriggerScenarios;
function getProjectFileName(runtime, appName) {
    const projectFileName = projectFileMap.get(runtime);
    if (projectFileName) {
        return projectFileName(appName);
    }
    throw new Error("invalid bot input");
}
exports.getProjectFileName = getProjectFileName;
//# sourceMappingURL=mapping.js.map