"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DotnetBotImpl = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const folder_1 = require("../../../../folder");
const constants_1 = require("../../../../common/constants");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../../solution/fx-solution/v2/adaptor");
const logger_1 = require("../logger");
const messages_1 = require("../resources/messages");
const result_1 = require("../result");
const tools_1 = require("../../../../common/tools");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const constants_2 = require("./constants");
const plugin_1 = require("../plugin");
const errors_1 = require("./errors");
const constants_3 = require("../../../solution/fx-solution/constants");
const strings_1 = require("../resources/strings");
// Extends TeamsBotImpl to reuse provision method
class DotnetBotImpl extends plugin_1.TeamsBotImpl {
    async generateArmTemplates(ctx) {
        logger_1.Logger.info(messages_1.Messages.GeneratingArmTemplatesBot);
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(ctx.projectSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDir = path_1.default.join(folder_1.getTemplatesFolder(), constants_2.PathInfo.BicepTemplateRelativeDir);
        const provisionOrchestration = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_2.PathInfo.ProvisionModuleTemplateFileName), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { botservice: provisionModules },
            },
            Parameters: JSON.parse(await fs_extra_1.default.readFile(path_1.default.join(bicepTemplateDir, constants_1.Bicep.ParameterFileName), constants_1.ConstantString.UTF8Encoding)),
        };
        logger_1.Logger.info(messages_1.Messages.SuccessfullyGenerateArmTemplatesBot);
        return result_1.FxBotPluginResultFactory.Success(result);
    }
    async postLocalDebug(context) {
        var _a, _b;
        await super.postLocalDebug(context);
        const appSettingsPath = path_1.default.join(context.root, constants_2.PathInfo.appSettingDevelopment);
        try {
            let appSettings = await fs_extra_1.default.readFile(appSettingsPath, "utf-8");
            const botId = (_a = context.envInfo.state.get(constants_3.PluginNames.BOT)) === null || _a === void 0 ? void 0 : _a.get(strings_1.PluginBot.BOT_ID);
            const botPassword = (_b = context.envInfo.state.get(constants_3.PluginNames.BOT)) === null || _b === void 0 ? void 0 : _b.get(strings_1.PluginBot.BOT_PASSWORD);
            if (!botId && !botPassword) {
                logger_1.Logger.warning("Bot id and password are empty");
                return result_1.FxBotPluginResultFactory.Success();
            }
            if (botId) {
                appSettings = appSettings.replace(constants_2.RegularExpr.botId, botId);
            }
            if (botPassword) {
                appSettings = appSettings.replace(constants_2.RegularExpr.botPassword, botPassword);
            }
            await fs_extra_1.default.writeFile(appSettingsPath, appSettings, "utf-8");
        }
        catch (error) {
            throw new errors_1.FileIOError(appSettingsPath);
        }
        return result_1.FxBotPluginResultFactory.Success();
    }
    // Overwrite below lifecycle for dotnet scenario
    async updateArmTemplates(ctx) {
        return result_1.FxBotPluginResultFactory.Success({});
    }
    async scaffold(context) {
        return result_1.FxBotPluginResultFactory.Success();
    }
    async preDeploy(ctx) {
        return result_1.FxBotPluginResultFactory.Success();
    }
    async deploy(ctx) {
        return result_1.FxBotPluginResultFactory.Success();
    }
}
exports.DotnetBotImpl = DotnetBotImpl;
//# sourceMappingURL=plugin.js.map