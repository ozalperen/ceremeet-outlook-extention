import { FxError, Result, v2, TeamsAppManifest, TokenProvider, Void, v3, AppStudioTokenProvider } from "@microsoft/teamsfx-api";
import { ResourcePermission, TeamsAppAdmin } from "../../../../common/permissionInterface";
import { IUserList } from "../interfaces/IAppDefinition";
export declare class AppStudioPluginV3 {
    name: string;
    displayName: string;
    private appStudioPluginImpl;
    /**
     * Generate initial manifest template file, for both local debug & remote
     * @param ctx
     * @param inputs
     * @returns
     */
    init(ctx: v2.Context, inputs: v2.InputsWithProjectPath): Promise<Result<any, FxError>>;
    /**
     * Check if manifest templates already exist.
     */
    preCheck(projectPath: string): Promise<string[]>;
    /**
     * Append capabilities to manifest templates
     * @param ctx
     * @param inputs
     * @param capabilities
     * @returns
     */
    addCapabilities(ctx: v2.Context, inputs: v2.InputsWithProjectPath, capabilities: v3.ManifestCapability[]): Promise<Result<any, FxError>>;
    /**
     * Update existing manifest template
     * @param ctx
     * @param inputs
     * @param capability
     */
    updateCapability(ctx: v2.Context, inputs: v2.InputsWithProjectPath, capability: v3.ManifestCapability): Promise<Result<any, FxError>>;
    /**
     * Delete existing manifest template
     * @param ctx
     * @param inputs
     * @param capability
     */
    deleteCapability(ctx: v2.Context, inputs: v2.InputsWithProjectPath, capability: v3.ManifestCapability): Promise<Result<any, FxError>>;
    /**
     * Should conside both local and remote
     * @returns
     */
    loadManifest(ctx: v2.Context, inputs: v2.InputsWithProjectPath): Promise<Result<{
        local: TeamsAppManifest;
        remote: TeamsAppManifest;
    }, FxError>>;
    /**
     * Save manifest template file
     * @param ctx ctx.manifest
     * @param inputs
     * @returns
     */
    saveManifest(ctx: v2.Context, inputs: v2.InputsWithProjectPath, manifest: {
        local: TeamsAppManifest;
        remote: TeamsAppManifest;
    }): Promise<Result<any, FxError>>;
    /**
     * Load manifest template, and check if it exceeds the limit.
     * The limit of staticTab if 16, others are 1
     * Should check both local & remote manifest template file
     * @param capability
     * @returns
     */
    capabilityExceedLimit(ctx: v2.Context, inputs: v2.InputsWithProjectPath, capability: "staticTab" | "configurableTab" | "Bot" | "MessageExtension" | "WebApplicationInfo"): Promise<Result<boolean, FxError>>;
    registerTeamsApp(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<string, FxError>>;
    updateTeamsApp(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<string, FxError>>;
    publishTeamsApp(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: AppStudioTokenProvider): Promise<Result<Void, FxError>>;
    private getTeamsAppId;
    listCollaborator(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, appStudioTokenProvider: AppStudioTokenProvider): Promise<Result<TeamsAppAdmin[], FxError>>;
    checkPermission(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, appStudioTokenProvider: AppStudioTokenProvider, userInfo: IUserList): Promise<Result<ResourcePermission[], FxError>>;
    grantPermission(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, appStudioTokenProvider: AppStudioTokenProvider, userInfo: IUserList): Promise<Result<ResourcePermission[], FxError>>;
}
//# sourceMappingURL=index.d.ts.map