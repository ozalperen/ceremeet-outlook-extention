"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsManifestResource = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("../../plugins/solution/fx-solution/v3/constants");
let TeamsManifestResource = class TeamsManifestResource {
    constructor() {
        this.name = "teams-manifest";
        this.outputs = {
            teamsAppId: {
                key: "teamsAppId",
            },
            tenantId: {
                key: "tenantId",
            },
        };
        this.finalOutputKeys = ["teamsAppId", "tenantId"];
    }
    init(context, inputs) {
        const createFilePath = [
            path.join(inputs.projectPath, "templates", "appPackage", "resources", "color.png"),
            path.join(inputs.projectPath, "templates", "appPackage", "resources", "outline.png"),
            path.join(inputs.projectPath, "templates", "appPackage", "manifest.template.json"),
        ];
        const effect = {
            type: "file",
            operate: "create",
            filePath: createFilePath,
        };
        const action = {
            name: "teams-manifest.init",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([effect]);
            },
            execute: async (context, inputs) => {
                const appStudio = typedi_1.Container.get(constants_1.BuiltInFeaturePluginNames.appStudio);
                const res = await appStudio.init(context, inputs);
                if (res.isErr())
                    return res;
                return teamsfx_api_1.ok([effect]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    addCapability(context, inputs) {
        const effect = {
            type: "file",
            operate: "replace",
            filePath: path.join(inputs.projectPath, "templates", "appPackage", "manifest.template.json"),
        };
        const action = {
            name: "teams-manifest.addCapability",
            type: "function",
            plan: (context, inputs) => {
                effect.remarks = `add capabilities (${JSON.stringify(inputs.capabilities)}) in manifest`;
                return teamsfx_api_1.ok([effect]);
            },
            execute: async (context, inputs) => {
                const appStudio = typedi_1.Container.get(constants_1.BuiltInFeaturePluginNames.appStudio);
                const addRes = await appStudio.addCapabilities(context, inputs, inputs.capabilities);
                if (addRes.isErr())
                    return addRes;
                effect.remarks = `add capabilities (${JSON.stringify(inputs.capabilities)}) in manifest`;
                return teamsfx_api_1.ok([effect]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    provision(context, inputs) {
        const action = {
            name: "teams-manifest.provision",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "register teams app",
                    },
                ]);
            },
            execute: async (context, inputs) => {
                const ctx = context;
                ctx.envInfo.state["teams-manifest"] = ctx.envInfo.state["teams-manifest"] || {};
                const config = ctx.envInfo.state["teams-manifest"];
                config.teamsAppId = "MockTeamsAppId";
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "register teams app",
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    configure(context, inputs) {
        const action = {
            name: "teams-manifest.configure",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "update teams app",
                    },
                ]);
            },
            execute: async (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "update teams app",
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
TeamsManifestResource = tslib_1.__decorate([
    typedi_1.Service("teams-manifest")
], TeamsManifestResource);
exports.TeamsManifestResource = TeamsManifestResource;
//# sourceMappingURL=teamsManifest.js.map