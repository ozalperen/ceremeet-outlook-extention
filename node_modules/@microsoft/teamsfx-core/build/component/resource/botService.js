"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAzureAccountCredential = exports.createBotRegInAppStudio = exports.createBotAAD = exports.BotServiceResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const tools_1 = require("../../common/tools");
const folder_1 = require("../../folder");
const strings_1 = require("../../plugins/resource/bot/resources/strings");
const error_1 = require("../../plugins/resource/bot/v3/error");
const uuid = tslib_1.__importStar(require("uuid"));
const resourceNameFactory_1 = require("../../plugins/resource/bot/utils/resourceNameFactory");
const constants_1 = require("../../plugins/resource/bot/constants");
const aadRegistration_1 = require("../../plugins/resource/bot/aadRegistration");
const messages_1 = require("../../plugins/resource/bot/resources/messages");
const appStudio_1 = require("../../plugins/resource/bot/appStudio/appStudio");
const clientFactory_1 = require("../../plugins/resource/bot/clientFactory");
let BotServiceResource = class BotServiceResource {
    constructor() {
        this.outputs = {
            botId: {
                key: "botId",
            },
            botPassword: {
                key: "botPassword",
            },
        };
        this.finalOutputKeys = ["botId", "botPassword"];
        this.secretFields = ["botPassword"];
        this.name = "bot-service";
    }
    generateBicep(context, inputs) {
        const action = {
            name: "bot-service.generateBicep",
            type: "function",
            plan: async (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Configuration: {
                        Modules: { botService: "1" },
                        Orchestration: "1",
                    },
                };
                return teamsfx_api_1.ok([bicep]);
            },
            execute: async (context, inputs) => {
                const mPath = path.join(folder_1.getTemplatesFolder(), "bicep", "botService.config.module.bicep");
                const oPath = path.join(folder_1.getTemplatesFolder(), "bicep", "botService.config.orchestration.bicep");
                let module = await fs_extra_1.default.readFile(mPath, "utf-8");
                const templateContext = {};
                if (inputs.hosting === "azure-web-app") {
                    const resource = typedi_1.Container.get("azure-web-app");
                    templateContext.endpointVarName = resource.outputs.endpoint.bicepVariable;
                }
                module = tools_1.compileHandlebarsTemplateString(module, templateContext);
                const orch = await fs_extra_1.default.readFile(oPath, "utf-8");
                const bicep = {
                    type: "bicep",
                    Configuration: { Modules: { botService: module }, Orchestration: orch },
                };
                return teamsfx_api_1.ok([bicep]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    provision(context, inputs) {
        const action = {
            name: "bot-service.provision",
            type: "function",
            plan: (context, inputs) => {
                const ctx = context;
                const plans = [];
                if (ctx.envInfo.envName === "local") {
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                    plans.push({
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "create bot registration",
                    });
                }
                else {
                    plans.push({
                        type: "service",
                        name: "management.azure.com",
                        remarks: "ensure resource providers for: " + constants_1.AzureConstants.requiredResourceProviders,
                    });
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                }
                return teamsfx_api_1.ok(plans);
            },
            execute: async (context, inputs) => {
                // create bot aad app by API call
                const ctx = context;
                const plans = [];
                if (ctx.envInfo.envName === "local") {
                    const aadRes = await createBotAAD(ctx);
                    if (aadRes.isErr())
                        return teamsfx_api_1.err(aadRes.error);
                    const botConfig = aadRes.value;
                    const regRes = await createBotRegInAppStudio(botConfig, ctx);
                    if (regRes.isErr())
                        return teamsfx_api_1.err(regRes.error);
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                    plans.push({
                        type: "service",
                        name: "teams.microsoft.com",
                        remarks: "create bot registration",
                    });
                }
                else {
                    // Check Resource Provider
                    const azureCredential = await getAzureAccountCredential(ctx.tokenProvider.azureAccountProvider);
                    const solutionConfig = ctx.envInfo.state.solution;
                    const rpClient = clientFactory_1.createResourceProviderClient(azureCredential, solutionConfig.subscriptionId);
                    await clientFactory_1.ensureResourceProvider(rpClient, constants_1.AzureConstants.requiredResourceProviders);
                    const aadRes = await createBotAAD(ctx);
                    if (aadRes.isErr())
                        return teamsfx_api_1.err(aadRes.error);
                    plans.push({
                        type: "service",
                        name: "management.azure.com",
                        remarks: "ensure resource providers for: " + constants_1.AzureConstants.requiredResourceProviders,
                    });
                    plans.push({
                        type: "service",
                        name: "graph.microsoft.com",
                        remarks: "create AAD app for bot service (botId, botPassword)",
                    });
                }
                return teamsfx_api_1.ok(plans);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
BotServiceResource = tslib_1.__decorate([
    typedi_1.Service("bot-service")
], BotServiceResource);
exports.BotServiceResource = BotServiceResource;
async function createBotAAD(ctx) {
    const token = await ctx.tokenProvider.graphTokenProvider.getAccessToken();
    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.GRAPH_TOKEN, token);
    error_1.CheckThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, ctx.projectSetting.appName);
    let botConfig = ctx.envInfo.state["bot-service"];
    if (!botConfig) {
        botConfig = {};
        ctx.envInfo.state["bot-service"] = botConfig;
    }
    const botAADCreated = (botConfig === null || botConfig === void 0 ? void 0 : botConfig.botId) !== undefined && (botConfig === null || botConfig === void 0 ? void 0 : botConfig.botPassword) !== undefined;
    if (!botAADCreated) {
        const solutionConfig = ctx.envInfo.state.solution;
        const resourceNameSuffix = solutionConfig.resourceNameSuffix
            ? solutionConfig.resourceNameSuffix
            : uuid.v4();
        const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(resourceNameSuffix, ctx.projectSetting.appName, constants_1.MaxLengths.AAD_DISPLAY_NAME);
        const botAuthCredentials = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(token, aadDisplayName, botConfig.objectId, botConfig.botId);
        botConfig.botId = botAuthCredentials.clientId;
        botConfig.botPassword = botAuthCredentials.clientSecret;
        botConfig.objectId = botAuthCredentials.objectId;
        ctx.logProvider.info(messages_1.Messages.SuccessfullyCreatedBotAadApp);
    }
    return teamsfx_api_1.ok(botConfig);
}
exports.createBotAAD = createBotAAD;
async function createBotRegInAppStudio(botConfig, ctx) {
    // 2. Register bot by app studio.
    const botReg = {
        botId: botConfig.botId,
        name: ctx.projectSetting.appName + strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
        description: "",
        iconUrl: "",
        messagingEndpoint: "",
        callingEndpoint: "",
    };
    ctx.logProvider.info(messages_1.Messages.ProvisioningBotRegistration);
    const appStudioToken = await ctx.tokenProvider.appStudioToken.getAccessToken();
    error_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, appStudioToken);
    await appStudio_1.AppStudio.createBotRegistration(appStudioToken, botReg);
    ctx.logProvider.info(messages_1.Messages.SuccessfullyProvisionedBotRegistration);
    return teamsfx_api_1.ok(undefined);
}
exports.createBotRegInAppStudio = createBotRegInAppStudio;
async function getAzureAccountCredential(tokenProvider) {
    const serviceClientCredentials = await tokenProvider.getAccountCredentialAsync();
    if (!serviceClientCredentials) {
        throw new error_1.PreconditionError(messages_1.Messages.FailToGetAzureCreds, [messages_1.Messages.TryLoginAzure]);
    }
    return serviceClientCredentials;
}
exports.getAzureAccountCredential = getAzureAccountCredential;
//# sourceMappingURL=botService.js.map