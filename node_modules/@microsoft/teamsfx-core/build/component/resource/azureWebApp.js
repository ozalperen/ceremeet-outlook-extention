"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureWebAppResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const folder_1 = require("../../folder");
let AzureWebAppResource = class AzureWebAppResource {
    constructor() {
        this.name = "azure-web-app";
        this.outputs = {
            resourceId: {
                key: "resourceId",
                bicepVariable: "provisionOutputs.azureWebAppOutput.value.resourceId",
            },
            domain: {
                key: "domain",
                bicepVariable: "provisionOutputs.azureWebAppOutput.value.domain",
            },
            endpoint: {
                key: "endpoint",
                bicepVariable: "provisionOutputs.azureWebAppOutput.value.endpoint",
            },
        };
        this.finalOutputKeys = ["resourceId", "endpoint"];
    }
    generateBicep(context, inputs) {
        const action = {
            name: "azure-web-app.generateBicep",
            type: "function",
            plan: (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Provision: {
                        Modules: { azureWebApp: "1" },
                        Orchestration: "1",
                    },
                    Parameters: {},
                };
                return teamsfx_api_1.ok([bicep]);
            },
            execute: async (context, inputs) => {
                const pmPath = path.join(folder_1.getTemplatesFolder(), "bicep", "azureWebApp.provision.module.bicep");
                const poPath = path.join(folder_1.getTemplatesFolder(), "bicep", "azureWebApp.provision.orchestration.bicep");
                const provisionModule = await fs_extra_1.default.readFile(pmPath, "utf-8");
                const ProvisionOrch = await fs_extra_1.default.readFile(poPath, "utf-8");
                const bicep = {
                    type: "bicep",
                    Provision: {
                        Modules: { azureWebApp: provisionModule },
                        Orchestration: ProvisionOrch,
                    },
                    Parameters: await fs_extra_1.default.readJson(path.join(folder_1.getTemplatesFolder(), "bicep", "azureWebApp.parameters.json")),
                };
                return teamsfx_api_1.ok([bicep]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    deploy(context, inputs) {
        const action = {
            name: "azure-web-app.deploy",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: `deploy azure web app in folder: ${path.join(inputs.projectPath, inputs["azure-web-app"].folder)}`,
                    },
                ]);
            },
            execute: async (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: `deploy azure web app in folder: ${path.join(inputs.projectPath, inputs["azure-web-app"].folder)}`,
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
AzureWebAppResource = tslib_1.__decorate([
    typedi_1.Service("azure-web-app")
], AzureWebAppResource);
exports.AzureWebAppResource = AzureWebAppResource;
//# sourceMappingURL=azureWebApp.js.map