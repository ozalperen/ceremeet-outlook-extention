"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureSqlResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const tools_1 = require("../../common/tools");
const folder_1 = require("../../folder");
let AzureSqlResource = class AzureSqlResource {
    constructor() {
        this.type = "cloud";
        this.name = "azure-sql";
        this.outputs = {
            sqlResourceId: {
                key: "resourceId",
                bicepVariable: "provisionOutputs.azureSqlOutput.value.resourceId",
            },
            sqlEndpoint: {
                key: "endpoint",
                bicepVariable: "provisionOutputs.azureSqlOutput.value.sqlEndpoint",
            },
            sqlDatabaseName: {
                key: "databaseName",
                bicepVariable: "provisionOutputs.azureSqlOutput.value.sqlDatabaseName",
            },
        };
        this.finalOutputKeys = ["sqlResourceId", "endpoint", "databaseName"];
    }
    generateBicep(context, inputs) {
        const action = {
            name: "azure-sql.generateBicep",
            type: "function",
            plan: async (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Provision: {
                        Modules: { azureSql: "1" },
                        Orchestration: "1",
                    },
                };
                if (inputs.provisionType === "database") {
                    bicep.Parameters = {};
                }
                return teamsfx_api_1.ok([bicep]);
            },
            execute: async (context, inputs) => {
                const prefix = inputs.provisionType === "database"
                    ? "azureSql.provisionDatabase"
                    : "azureSql.provisionServer";
                const mPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${prefix}.module.bicep`);
                const oPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${prefix}.orchestration.bicep`);
                let module = await fs_extra_1.default.readFile(mPath, "utf-8");
                let orch = await fs_extra_1.default.readFile(oPath, "utf-8");
                const suffix = tools_1.getUuid().substring(0, 6);
                const compileCtx = {
                    suffix: suffix,
                };
                if (inputs.provisionType === "database") {
                    module = await tools_1.generateBicepFromFile(mPath, compileCtx);
                    orch = await tools_1.generateBicepFromFile(oPath, compileCtx);
                }
                const bicep = {
                    type: "bicep",
                    Provision: {
                        Modules: { azureSql: module },
                        Orchestration: orch,
                    },
                };
                if (inputs.provisionType === "database") {
                    bicep.Parameters = await fs_extra_1.default.readJson(path.join(folder_1.getTemplatesFolder(), "bicep", "azureSql.parameters.json"));
                }
                return teamsfx_api_1.ok([bicep]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    configure(context, inputs) {
        const action = {
            name: "azure-sql.configure",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([{ type: "service", name: "azure", remarks: "configure azure-sql" }]);
            },
            execute: async (context, inputs) => {
                context.envInfo.state["azure-sql"].password = "MockSqlPassword";
                return teamsfx_api_1.ok([{ type: "service", name: "azure", remarks: "configure azure-sql" }]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
AzureSqlResource = tslib_1.__decorate([
    typedi_1.Service("azure-sql")
], AzureSqlResource);
exports.AzureSqlResource = AzureSqlResource;
//# sourceMappingURL=azureSql.js.map