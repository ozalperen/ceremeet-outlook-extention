"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Aad = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
//TODO
let Aad = class Aad {
    constructor() {
        this.type = "cloud";
        this.name = "aad";
        this.outputs = {};
        this.finalOutputKeys = [];
    }
    provision(context, inputs) {
        const action = {
            name: "aad.provision",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "M365",
                        remarks: "provision aad",
                    },
                ]);
            },
            execute: async (context, inputs) => {
                const ctx = context;
                ctx.envInfo.state["aad"] = {
                    clientId: "mockM365ClientId",
                    clientSecret: "mockM365ClientId",
                    authAuthorityHost: "mockM365OauthAuthorityHost",
                    tenantId: "mockM365TenantId",
                };
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "M365",
                        remarks: "provision aad",
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    configure(context, inputs) {
        const action = {
            name: "aad.configure",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "M365",
                        remarks: "configure aad",
                    },
                ]);
            },
            execute: async (context, inputs) => {
                const ctx = context;
                ctx.envInfo.state["aad"].m365ApplicationIdUri = inputs.m365ApplicationIdUri;
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "M365",
                        remarks: "config aad",
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
Aad = tslib_1.__decorate([
    typedi_1.Service("aad")
], Aad);
exports.Aad = Aad;
//# sourceMappingURL=aad.js.map