"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureStorageResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
let AzureStorageResource = class AzureStorageResource {
    constructor() {
        this.name = "azure-storage";
        this.outputs = {
            endpoint: {
                key: "endpoint",
                bicepVariable: "provisionOutputs.azureStorageOutput.value.endpoint",
            },
        };
        this.finalOutputKeys = ["endpoint"];
    }
    generateBicep(context, inputs) {
        const action = {
            name: "azure-sql.generateBicep",
            type: "function",
            plan: async (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Provision: {
                        Modules: { azureStorage: "1" },
                    },
                };
                return teamsfx_api_1.ok([bicep]);
            },
            execute: async (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Provision: {
                        Modules: { azureStorage: "1" },
                    },
                };
                return teamsfx_api_1.ok([bicep]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    configure(context, inputs) {
        const action = {
            name: "azure-storage.configure",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: "configure azure storage (enable static web site)",
                    },
                ]);
            },
            execute: async (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: "configure azure storage (enable static web site)",
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    deploy(context, inputs) {
        const action = {
            name: "azure-storage.deploy",
            type: "function",
            plan: (context, inputs) => {
                const deployInputs = inputs["azure-storage"];
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: `deploy azure storage with path: ${deployInputs.folder}, type: ${deployInputs.type}`,
                    },
                ]);
            },
            execute: async (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: `deploy azure storage with path: ${inputs.folder}, type: ${inputs.type}`,
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
AzureStorageResource = tslib_1.__decorate([
    typedi_1.Service("azure-storage")
], AzureStorageResource);
exports.AzureStorageResource = AzureStorageResource;
//# sourceMappingURL=azureStorage.js.map