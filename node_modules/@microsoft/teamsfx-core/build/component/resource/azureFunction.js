"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureFunctionResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
let AzureFunctionResource = class AzureFunctionResource {
    constructor() {
        this.name = "azure-function";
        this.outputs = {
            resourceId: {
                key: "resourceId",
                bicepVariable: "provisionOutputs.azureFunctionOutput.value.resourceId",
            },
            endpoint: {
                key: "endpoint",
                bicepVariable: "provisionOutputs.azureFunctionOutput.value.sqlEndpoint",
            },
        };
        this.finalOutputKeys = ["resourceId", "endpoint"];
    }
    generateBicep(context, inputs) {
        const action = {
            name: "azure-sql.generateBicep",
            type: "function",
            plan: async (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "bicep",
                        Modules: { azureFunction: "1" },
                        Orchestration: "1",
                    },
                ]);
            },
            execute: async (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Provision: {
                        Modules: { azureFunction: "" },
                        Orchestration: "",
                    },
                };
                return teamsfx_api_1.ok([bicep]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    configure(context, inputs) {
        const action = {
            name: "azure-function.configure",
            type: "function",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: "config azure function",
                    },
                ]);
            },
            execute: async (context, inputs) => {
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: "config azure function",
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
AzureFunctionResource = tslib_1.__decorate([
    typedi_1.Service("azure-function")
], AzureFunctionResource);
exports.AzureFunctionResource = AzureFunctionResource;
//# sourceMappingURL=azureFunction.js.map