"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteProjectSettingsAction = exports.LoadProjectSettingsAction = exports.ProjectSettingsManager = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const projectSettingsLoader_1 = require("../core/middleware/projectSettingsLoader");
const uuid = tslib_1.__importStar(require("uuid"));
const crypto_1 = require("../core/crypto");
const utils_1 = require("./utils");
let ProjectSettingsManager = class ProjectSettingsManager {
    constructor() {
        this.name = "project-settings";
    }
    load(context, inputs) {
        const action = {
            type: "function",
            name: "project-settings.load",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([]);
            },
            execute: async (context, inputs) => {
                const filePath = projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath);
                const projectSettings = (await fs_extra_1.default.readJson(filePath));
                if (!projectSettings.projectId) {
                    projectSettings.projectId = uuid.v4();
                }
                context.projectSetting = projectSettings;
                context.cryptoProvider = new crypto_1.LocalCrypto(projectSettings.projectId);
                return teamsfx_api_1.ok([]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    write(context, inputs) {
        const action = {
            type: "function",
            name: "project-settings.write",
            plan: (context, inputs) => {
                return teamsfx_api_1.ok([utils_1.createFileEffect(projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath), "replace")]);
            },
            execute: async (context, inputs) => {
                const filePath = projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath);
                const effect = utils_1.createFileEffect(projectSettingsLoader_1.getProjectSettingsPath(inputs.projectPath), "replace");
                await fs_extra_1.default.writeFile(filePath, JSON.stringify(context.projectSetting, null, 4));
                return teamsfx_api_1.ok([effect]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
ProjectSettingsManager = tslib_1.__decorate([
    typedi_1.Service("project-settings")
], ProjectSettingsManager);
exports.ProjectSettingsManager = ProjectSettingsManager;
exports.LoadProjectSettingsAction = {
    type: "call",
    name: "call project-settings.load",
    targetAction: "project-settings.load",
    required: true,
};
exports.WriteProjectSettingsAction = {
    type: "call",
    name: "call project-settings.write",
    targetAction: "project-settings.write",
    required: true,
};
//# sourceMappingURL=projectSettingsManager.js.map