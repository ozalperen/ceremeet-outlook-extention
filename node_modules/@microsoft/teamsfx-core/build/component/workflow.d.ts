import { Action, Component, ContextV3, Effect, FunctionAction, FxError, InputResult, Inputs, InputsWithProjectPath, Json, ProjectSettingsV3, Question, Result, SystemError, UserError, UserInteraction } from "@microsoft/teamsfx-api";
import "reflect-metadata";
export declare function getAction(name: string, context: ContextV3, inputs: InputsWithProjectPath): Promise<Action | undefined>;
export declare function getEmbeddedValueByPath(obj: Json, path: string): any;
export declare function resolveAction(action: Action, context: ContextV3, inputs: InputsWithProjectPath): Promise<Action>;
export declare function askQuestionForAction(action: Action, context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
export declare class ActionNotExist extends SystemError {
    constructor(action: string);
}
export declare function showPlanAndConfirm(title: string, effects: Effect[], context: ContextV3, inputs: InputsWithProjectPath): Promise<boolean>;
export declare function showSummary(title: string, effects: Effect[], context: ContextV3, inputs: InputsWithProjectPath): Promise<void>;
export declare function planAction(action: Action, context: ContextV3, inputs: InputsWithProjectPath, effects: Effect[]): Promise<Result<undefined, FxError>>;
export declare function executeAction(action: Action, context: ContextV3, inputs: InputsWithProjectPath, effects: Effect[]): Promise<Result<undefined, FxError>>;
export declare class ValidationError extends UserError {
    constructor(msg: string);
}
export declare function validateQuestion(question: Question, ui: UserInteraction, inputs: Inputs, step?: number, totalSteps?: number): Promise<Result<InputResult<any>, FxError>>;
export declare function executeFunctionAction(action: FunctionAction, context: ContextV3, inputs: InputsWithProjectPath, effects: Effect[]): Promise<Result<undefined, FxError>>;
export declare function getComponent(projectSettings: ProjectSettingsV3, resourceType: string): Component | undefined;
export declare function runAction(actionName: string, context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
//# sourceMappingURL=workflow.d.ts.map