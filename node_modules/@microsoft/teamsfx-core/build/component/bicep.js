"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BicepProvider = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const folder_1 = require("../folder");
const arm_1 = tslib_1.__importDefault(require("../plugins/solution/fx-solution/arm"));
const utils_1 = require("./utils");
let BicepProvider = class BicepProvider {
    constructor() {
        this.name = "bicep";
    }
    init(context, inputs) {
        const action = {
            name: "bicep.init",
            type: "function",
            plan: async (context, inputs) => {
                const targetFolder = path.join(inputs.projectPath, "templates", "azure");
                return teamsfx_api_1.ok(utils_1.createFilesEffects([
                    path.join(targetFolder, "main.bicep"),
                    path.join(targetFolder, "provision.bicep"),
                    path.join(targetFolder, "config.bicep"),
                ], "skip"));
            },
            execute: async (context, inputs) => {
                const sourceFolder = path.join(folder_1.getTemplatesFolder(), "bicep");
                const targetFolder = path.join(inputs.projectPath, "templates", "azure");
                if ((await fs_extra_1.default.pathExists(path.join(targetFolder, "main.bicep"))) &&
                    (await fs_extra_1.default.pathExists(path.join(targetFolder, "provision.bicep"))) &&
                    (await fs_extra_1.default.pathExists(path.join(targetFolder, "config.bicep"))))
                    return teamsfx_api_1.ok([]);
                await fs_extra_1.default.ensureDir(targetFolder);
                await fs_extra_1.default.ensureDir(path.join(targetFolder, "provision"));
                await fs_extra_1.default.ensureDir(path.join(targetFolder, "teamsFx"));
                if (!(await fs_extra_1.default.pathExists(path.join(targetFolder, "main.bicep")))) {
                    await fs_extra_1.default.copyFile(path.join(sourceFolder, "main.bicep"), path.join(targetFolder, "main.bicep"));
                }
                if (!(await fs_extra_1.default.pathExists(path.join(targetFolder, "provision.bicep")))) {
                    await fs_extra_1.default.copyFile(path.join(sourceFolder, "provision.bicep"), path.join(targetFolder, "provision.bicep"));
                }
                if (!(await fs_extra_1.default.pathExists(path.join(targetFolder, "config.bicep")))) {
                    await fs_extra_1.default.copyFile(path.join(sourceFolder, "config.bicep"), path.join(targetFolder, "config.bicep"));
                }
                const effect = {
                    type: "file",
                    operate: "create",
                    filePath: [
                        path.join(targetFolder, "main.bicep"),
                        path.join(targetFolder, "provision.bicep"),
                        path.join(targetFolder, "config.bicep"),
                    ],
                };
                return teamsfx_api_1.ok([effect]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    deploy(context, inputs) {
        const action = {
            type: "function",
            name: "azure-bicep.deploy",
            plan: (context, inputs) => {
                const deployInputs = inputs["bicep"];
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: `deploy bicep, ${JSON.stringify(deployInputs)}`,
                    },
                ]);
            },
            execute: async (context, inputs) => {
                const ctx = context;
                const res = await arm_1.default.deployArmTemplates(ctx, inputs, ctx.envInfo, ctx.tokenProvider.azureAccountProvider);
                if (res.isErr())
                    return teamsfx_api_1.err(res.error);
                // ctx.envInfo.state["azure-web-app"] = ctx.envInfo.state["azure-web-app"] || {};
                // ctx.envInfo.state["azure-sql"] = ctx.envInfo.state["azure-sql"] || {};
                // ctx.envInfo.state["azure-web-app"].endpoint = "MockAzureWebAppEndpoint";
                // ctx.envInfo.state["azure-web-app"].resourceId = "MockAzureWebAppResourceId";
                // ctx.envInfo.state["azure-web-app"].domain = "MockAzureWebAppDomain";
                // ctx.envInfo.state["azure-sql"].sqlResourceId = "MockSqlResourceId";
                // ctx.envInfo.state["azure-sql"].sqlEndpoint = "MockSqlEndpoint";
                // ctx.envInfo.state["azure-sql"].sqlDatabaseName = "MockSqlDatabaseName";
                return teamsfx_api_1.ok([
                    {
                        type: "service",
                        name: "azure",
                        remarks: "deploy bicep",
                    },
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
BicepProvider = tslib_1.__decorate([
    typedi_1.Service("bicep")
], BicepProvider);
exports.BicepProvider = BicepProvider;
//# sourceMappingURL=bicep.js.map