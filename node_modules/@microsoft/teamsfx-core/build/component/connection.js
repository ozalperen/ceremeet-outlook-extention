"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureWebAppConfig = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const path = tslib_1.__importStar(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const folder_1 = require("../folder");
const workflow_1 = require("./workflow");
const tools_1 = require("../common/tools");
let AzureWebAppConfig = class AzureWebAppConfig {
    constructor() {
        this.name = "azure-web-app-config";
        this.references = ["azure-web-app", "azure-sql", "key-vault", "identity", "azure-function"];
    }
    generateBicep(context, inputs) {
        const action = {
            name: "azure-web-app-config.generateBicep",
            type: "function",
            plan: async (context, inputs) => {
                const bicep = {
                    type: "bicep",
                    Configuration: {
                        Modules: { azureWebAppConfig: "1" },
                        Orchestration: "1",
                    },
                };
                return teamsfx_api_1.ok([bicep]);
            },
            execute: async (context, inputs) => {
                const webAppComponent = workflow_1.getComponent(context.projectSetting, "azure-web-app");
                if (!webAppComponent)
                    return teamsfx_api_1.ok([]);
                const templateContext = {};
                templateContext.connections = (webAppComponent === null || webAppComponent === void 0 ? void 0 : webAppComponent.connections) || [];
                for (const ref of this.references) {
                    templateContext[ref] = { outputs: {} };
                    try {
                        const refResource = typedi_1.Container.get(ref);
                        if (refResource.outputs) {
                            for (const key of Object.keys(refResource.outputs)) {
                                const entry = refResource.outputs[key];
                                const value = entry.bicepVariable;
                                templateContext[ref].outputs[key] = value;
                            }
                        }
                    }
                    catch (e) { }
                }
                const tabConfig = workflow_1.getComponent(context.projectSetting, "teams-tab");
                if (tabConfig) {
                    if (tabConfig.hosting === "azure-web-app") {
                        const azureWebApp = typedi_1.Container.get(tabConfig.hosting);
                        templateContext.tabDomainVarName = azureWebApp.outputs.endpoint.bicepVariable;
                    }
                    else if (tabConfig.hosting === "azure-storage") {
                        const azureStorage = typedi_1.Container.get(tabConfig.hosting);
                        templateContext.tabDomainVarName = azureStorage.outputs.endpoint.bicepVariable;
                    }
                }
                const modulePath = path.join(folder_1.getTemplatesFolder(), "bicep", "azureWebApp.config.module.bicep");
                let module = await fs_extra_1.default.readFile(modulePath, "utf-8");
                module = tools_1.compileHandlebarsTemplateString(module, templateContext);
                const orchPath = path.join(folder_1.getTemplatesFolder(), "bicep", "azureWebApp.config.orchestration.bicep");
                const orch = !webAppComponent ? await fs_extra_1.default.readFile(orchPath, "utf-8") : undefined;
                const bicep = {
                    type: "bicep",
                    Configuration: { Modules: { azureWebAppConfig: module }, Orchestration: orch },
                };
                return teamsfx_api_1.ok([bicep]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
};
AzureWebAppConfig = tslib_1.__decorate([
    typedi_1.Service("azure-web-app-config")
], AzureWebAppConfig);
exports.AzureWebAppConfig = AzureWebAppConfig;
//# sourceMappingURL=connection.js.map