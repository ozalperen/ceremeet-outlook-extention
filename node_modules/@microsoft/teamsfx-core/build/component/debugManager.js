"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugManager = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
let DebugManager = class DebugManager {
    constructor() {
        this.name = "env-manager";
    }
    setupLocalEnvironment(context, inputs) {
        // const action: Action = {
        //   name: "debug-manager.setupLocalEnvironment",
        //   type: "function",
        //   plan: async (context: ContextV3, inputs: InputsWithProjectPath) => {
        //     return ok(["set up local environment"]);
        //   },
        //   execute: async (context: ContextV3, inputs: InputsWithProjectPath) => {
        //     const ctx = context as ProvisionContextV3;
        //     const localEnvSetupResult = await setupLocalEnvironment(ctx, inputs, ctx.envInfo);
        //     if (localEnvSetupResult.isErr()) {
        //       return err(localEnvSetupResult.error);
        //     }
        //     return ok(["set up local environment"]);
        //   },
        // };
        // return ok(action);
        return teamsfx_api_1.ok(undefined);
    }
    configLocalEnvironment(context, inputs) {
        // const action: Action = {
        //   type: "function",
        //   name: "debug-manager.configLocalEnvironment",
        //   plan: (context: ContextV3, inputs: InputsWithProjectPath) => {
        //     return ok(["config local environment"]);
        //   },
        //   execute: async (context: ContextV3, inputs: InputsWithProjectPath) => {
        //     const ctx = context as ProvisionContextV3;
        //     const localConfigResult = await configLocalEnvironment(ctx, inputs, ctx.envInfo);
        //     if (localConfigResult.isErr()) {
        //       return err(localConfigResult.error);
        //     }
        //     return ok(["config local environment"]);
        //   },
        // };
        // return ok(action);
        return teamsfx_api_1.ok(undefined);
    }
};
DebugManager = tslib_1.__decorate([
    typedi_1.Service("debug-manager")
], DebugManager);
exports.DebugManager = DebugManager;
//# sourceMappingURL=debugManager.js.map