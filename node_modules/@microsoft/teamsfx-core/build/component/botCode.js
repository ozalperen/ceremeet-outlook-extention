"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToLangKey = exports.BotCodeProvider = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const typedi_1 = require("typedi");
const templatesActions_1 = require("../common/template-utils/templatesActions");
const constants_1 = require("../plugins/resource/bot/constants");
const strings_1 = require("../plugins/resource/bot/resources/strings");
const error_1 = require("../plugins/resource/bot/v3/error");
const workflow_1 = require("./workflow");
/**
 * bot scaffold plugin
 */
let BotCodeProvider = class BotCodeProvider {
    constructor() {
        this.type = "code";
        this.name = "bot-code";
    }
    generate(context, inputs) {
        const action = {
            name: "bot-code.generate",
            type: "function",
            plan: (context, inputs) => {
                const folder = inputs.folder || strings_1.CommonStrings.BOT_WORKING_DIR_NAME;
                return teamsfx_api_1.ok([
                    "add component 'bot-code' in projectSettings",
                    `scaffold bot source code in folder: ${path.join(inputs.projectPath, folder)}`,
                ]);
            },
            execute: async (context, inputs) => {
                const projectSettings = context.projectSetting;
                const language = inputs.language || context.projectSetting.programmingLanguage || "javascript";
                const botFolder = inputs.folder || strings_1.CommonStrings.BOT_WORKING_DIR_NAME;
                const component = {
                    name: "bot-code",
                    hosting: inputs.hosting,
                    build: true,
                    language: language,
                    folder: botFolder,
                    scenarios: inputs.scenarios,
                };
                projectSettings.components.push(component);
                const group_name = constants_1.TemplateProjectsConstants.GROUP_NAME_BOT;
                const lang = convertToLangKey(language);
                const workingDir = path.join(inputs.projectPath, botFolder);
                for (const scenario of inputs.scenarios) {
                    await templatesActions_1.scaffoldFromTemplates({
                        group: group_name,
                        lang: lang,
                        scenario: scenario,
                        dst: workingDir,
                        onActionError: async (action, context, error) => {
                            switch (action.name) {
                                case templatesActions_1.ScaffoldActionName.FetchTemplatesUrlWithTag:
                                case templatesActions_1.ScaffoldActionName.FetchTemplatesZipFromUrl:
                                    break;
                                case templatesActions_1.ScaffoldActionName.FetchTemplateZipFromLocal:
                                    throw new error_1.TemplateZipFallbackError();
                                case templatesActions_1.ScaffoldActionName.Unzip:
                                    throw new error_1.UnzipError(context.dst);
                                default:
                                    throw new Error(error.message);
                            }
                        },
                    });
                }
                return teamsfx_api_1.ok([
                    "add component 'bot-code' in projectSettings",
                    `scaffold bot source code in folder: ${path.join(inputs.projectPath, botFolder)}`,
                ]);
            },
        };
        return teamsfx_api_1.ok(action);
    }
    build(context, inputs) {
        const component = workflow_1.getComponent(context.projectSetting, "bot-code");
        if (component) {
            const language = component.language || context.projectSetting.programmingLanguage;
            if (language === "typescript") {
                const group = {
                    type: "group",
                    name: "bot-code.build",
                    actions: [
                        {
                            type: "shell",
                            command: "npm install",
                            description: `npm install (${path.resolve(inputs.projectPath, "bot")})`,
                            cwd: path.resolve(inputs.projectPath, "bot"),
                        },
                        {
                            type: "shell",
                            command: "npm run build",
                            description: `npm run build (${path.resolve(inputs.projectPath, "bot")})`,
                            cwd: path.resolve(inputs.projectPath, "bot"),
                        },
                    ],
                };
                return teamsfx_api_1.ok(group);
            }
            else if (language === "csharp") {
                return teamsfx_api_1.ok({
                    type: "shell",
                    name: "bot-code.build",
                    command: "MsBuild",
                    description: `MsBuild (${path.resolve(inputs.projectPath, "bot")})`,
                    cwd: path.resolve(inputs.projectPath, "bot"),
                });
            }
            else
                return teamsfx_api_1.ok(undefined);
        }
        return teamsfx_api_1.ok(undefined);
    }
};
BotCodeProvider = tslib_1.__decorate([
    typedi_1.Service("bot-code")
], BotCodeProvider);
exports.BotCodeProvider = BotCodeProvider;
function convertToLangKey(programmingLanguage) {
    switch (programmingLanguage) {
        case "javascript": {
            return "js";
        }
        case "typescript": {
            return "ts";
        }
        default: {
            return "js";
        }
    }
}
exports.convertToLangKey = convertToLangKey;
//# sourceMappingURL=botCode.js.map