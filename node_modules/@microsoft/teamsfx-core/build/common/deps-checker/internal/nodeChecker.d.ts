import { DepsCheckerError } from "../depsError";
import { DepsCheckerEvent } from "../constant/telemetry";
import { DepsLogger } from "../depsLogger";
import { DepsTelemetry } from "../depsTelemetry";
import { DepsInfo, DepsChecker } from "../depsChecker";
import { Result } from "@microsoft/teamsfx-api";
declare class NodeVersion {
    readonly version: string;
    readonly majorVersion: string;
    constructor(version: string, majorVersion: string);
}
export declare abstract class NodeChecker implements DepsChecker {
    protected abstract readonly _nodeNotFoundHelpLink: string;
    protected abstract readonly _nodeNotSupportedEvent: DepsCheckerEvent;
    protected abstract getSupportedVersions(): Promise<string[]>;
    protected abstract getNodeNotSupportedHelpLink(): Promise<string>;
    private readonly _telemetry;
    private readonly _logger;
    constructor(logger: DepsLogger, telemetry: DepsTelemetry);
    isInstalled(): Promise<boolean>;
    checkInstalled(): Promise<boolean>;
    resolve(): Promise<Result<boolean, DepsCheckerError>>;
    install(): Promise<void>;
    getDepsInfo(): Promise<DepsInfo>;
    private static isVersionSupported;
    command(): Promise<string>;
}
export declare function getInstalledNodeVersion(): Promise<NodeVersion | null>;
export declare class SPFxNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForSPFx;
    protected getNodeNotSupportedHelpLink(): Promise<string>;
    protected getSupportedVersions(): Promise<string[]>;
}
export declare class AzureNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForAzure;
    protected getNodeNotSupportedHelpLink(): Promise<string>;
    protected getSupportedVersions(): Promise<string[]>;
}
export declare class FunctionNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForAzure;
    protected getNodeNotSupportedHelpLink(): Promise<string>;
    protected getSupportedVersions(): Promise<string[]>;
}
export {};
//# sourceMappingURL=nodeChecker.d.ts.map