// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalEnvManager = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const localSettingsHelper_1 = require("./localSettingsHelper");
const localStateHelper = tslib_1.__importStar(require("./localStateHelper"));
const localSettingsProvider_1 = require("../localSettingsProvider");
const npmLogHelper_1 = require("./npmLogHelper");
const portChecker_1 = require("./portChecker");
const tools_1 = require("../tools");
const crypto_1 = require("../../core/crypto");
const error_1 = require("../../core/error");
const depsChecker_1 = require("../deps-checker/depsChecker");
const projectSettingsHelper_1 = require("./projectSettingsHelper");
const localCertificateManager_1 = require("./localCertificateManager");
const depsManager_1 = require("../deps-checker/depsManager");
const localStateProvider_1 = require("../localStateProvider");
const localizeUtils_1 = require("../localizeUtils");
class LocalEnvManager {
    constructor(logger, telemetry, ui) {
        this.logger = logger;
        this.telemetry = telemetry;
        this.ui = ui;
    }
    getActiveDependencies(projectSettings) {
        const depsTypes = [];
        const isSPFx = projectSettingsHelper_1.ProjectSettingsHelper.isSpfx(projectSettings);
        const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSettings);
        const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(projectSettings);
        const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSettings);
        const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSettings);
        const includeFuncHostedBot = projectSettingsHelper_1.ProjectSettingsHelper.includeFuncHostedBot(projectSettings);
        // NodeJS
        if (isSPFx) {
            depsTypes.push(depsChecker_1.DepsType.SpfxNode);
        }
        else if (includeBackend || includeFuncHostedBot) {
            depsTypes.push(depsChecker_1.DepsType.FunctionNode);
        }
        else {
            depsTypes.push(depsChecker_1.DepsType.AzureNode);
        }
        // Dotnet
        if ((includeFrontend && includeSimpleAuth) || includeBackend) {
            depsTypes.push(depsChecker_1.DepsType.Dotnet);
        }
        // Function core tool
        if (includeBackend || includeFuncHostedBot) {
            depsTypes.push(depsChecker_1.DepsType.FuncCoreTools);
        }
        // Ngrok
        if (includeBot) {
            depsTypes.push(depsChecker_1.DepsType.Ngrok);
        }
        return depsManager_1.DepsManager.sortBySequence(depsTypes);
    }
    async getLocalDebugEnvs(projectPath, projectSettings, localSettings, envInfo) {
        if (tools_1.isConfigUnifyEnabled()) {
            return await localStateHelper.convertToLocalEnvs(projectPath, projectSettings, envInfo, this.logger);
        }
        else {
            return await localSettingsHelper_1.convertToLocalEnvs(projectPath, projectSettings, localSettings, this.logger);
        }
    }
    async getNpmInstallLogInfo() {
        return await npmLogHelper_1.getNpmInstallLogInfo();
    }
    async getPortsInUse(projectPath, projectSettings) {
        return await portChecker_1.getPortsInUse(projectPath, projectSettings, false, this.logger);
    }
    async getLocalSettings(projectPath, cryptoOption) {
        const localSettingsProvider = new localSettingsProvider_1.LocalSettingsProvider(projectPath);
        const crypto = cryptoOption === undefined ? undefined : new crypto_1.LocalCrypto(cryptoOption.projectId);
        return await this.retry(async () => {
            return await localSettingsProvider.loadV2(crypto);
        });
    }
    async getLocalEnvInfo(projectPath, cryptoOption) {
        const localStateProvider = new localStateProvider_1.LocalStateProvider(projectPath);
        const crypto = new crypto_1.LocalCrypto(cryptoOption.projectId);
        return await this.retry(async () => {
            return await localStateProvider.loadV2(crypto);
        });
    }
    async getProjectSettings(projectPath) {
        return await this.retry(async () => {
            const projectSettingsPath = path.resolve(projectPath, `.${teamsfx_api_1.ConfigFolderName}`, teamsfx_api_1.InputConfigsFolderName, teamsfx_api_1.ProjectSettingsFileName);
            if (!(await fs.pathExists(projectSettingsPath))) {
                throw new teamsfx_api_1.UserError(error_1.CoreSource, "FileNotFoundError", localizeUtils_1.getDefaultString("error.FileNotFoundError", projectSettingsPath), localizeUtils_1.getLocalizedString("error.FileNotFoundError", projectSettingsPath));
            }
            try {
                return await fs.readJson(projectSettingsPath);
            }
            catch (error) {
                throw error_1.ReadFileError(error);
            }
        });
    }
    async resolveLocalCertificate(trustDevCert) {
        // Do not print any log in LocalCertificateManager, use the error message returned instead.
        const certManager = new localCertificateManager_1.LocalCertificateManager(this.ui);
        const res = await certManager.setupCertificate(trustDevCert);
        return res;
    }
    // Retry logic when reading project config files in case of read-write conflict
    async retry(func) {
        let n = 0;
        let error = undefined;
        while (n <= 2) {
            if (n !== 0) {
                await tools_1.waitSeconds(n);
            }
            try {
                return await func(n);
            }
            catch (e) {
                error = e;
                ++n;
            }
        }
        throw error;
    }
}
exports.LocalEnvManager = LocalEnvManager;
//# sourceMappingURL=localEnvManager.js.map